{"version":3,"sources":["logo.svg","assets/datacenter-logo.png","components/UI/Logo.js","assets/avatar.png","components/UI/MyNotificationBadge.js","Home/Header.js","Home/NotificationDrawer.js","Home/Sidebar.js","components/UI/MyCard.js","shared/colors.js","utils/LoadIcon.js","Views/Home/TopGallery.js","components/UI/Charts/MyAreaChart.js","Views/Home/MetricsDashboard.js","Views/Home/TopUtilization.js","components/UI/Charts/MySparklineChart.js","Views/Home/PerformanceSummary.js","components/UI/Charts/MyDonutUtilizationChart.js","Views/Home/MySparklineBarChart.js","Views/Home/PanelSummary.js","Views/Home/MyTable.js","Views/Home/PanelTable.js","Views/Home/index.js","Home/index.js","routes.js","DemoTemplates/Page/GroupPage.js","App.js","reportWebVitals.js","index.js"],"names":["logo","Brand","src","pfLogo","alt","NotBadge","props","useState","count","setCount","variant","setVariant","variantId","setVariantId","variants","className","onClick","onToggle","NotificationBadge","aria-label","Header","isDropdownOpen","setIsDropdownOpen","isKebabDropdownOpen","setIsKebabDropdownOpen","isDrawerExpanded","kebabDropdownItems","DropdownItem","userDropdownItems","DropdownGroup","component","headerTools","PageHeaderTools","PageHeaderToolsItem","visibility","default","isSelected","MyNotificationBadge","onCloseNotificationDrawer","PageHeaderToolsGroup","lg","Button","ButtonVariant","plain","Dropdown","isPlain","position","onSelect","event","toggle","KebabToggle","isOpen","dropdownItems","md","DropdownToggle","Avatar","imgAvatar","PageHeader","Logo","showNavToggle","MyNotificationDrawer","isActionsMenuOpen","setIsActionsMenuOpen","showNotifications","setShowNotifications","isUnreadMap","setIsUnreadMap","DropdownPosition","id","onListItemClick","fshowNotifications","notificationDrawerActions","notificationDrawerDropdownItems","DropdownSeparator","isDisabled","NotificationDrawer","NotificationDrawerHeader","Object","keys","reduce","onClose","NotificationDrawerBody","NotificationDrawerList","NotificationDrawerListItem","isRead","NotificationDrawerListItemHeader","title","srTitle","NotificationDrawerListItemBody","timestamp","direction","EmptyState","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","EmptyStateBody","EmptyStatePrimary","MySidebar","activeItem","setActiveItem","navItems","map","e","idx","NavItem","itemId","isActive","console","log","PageNav","Nav","result","toroute","target","outerText","toLowerCase","replace","history","push","NavList","PageSidebar","nav","componentMap","key","iconStyle","width","height","mapKey","warning","style","fill","error","check","shield","mapped","String","PatternflyIcons","MyCard","bodyStyle","display","alignItems","justifyContent","padding","margin","textStyle","fontSize","fontWeight","marginLeft","renderList","meta","badges","elem","Comp","compProps","Text","text","Card","CardTitle","textAlign","paddingTop","boxSizing","CardBody","keyMap","iconKey","defaultColors","TopGallery","GalleryItemsElems","LoadIcon","GalleryItem","Gallery","hasGutter","BasicWithRightAlignedLegend","name","startDate","Date","getTime","data","Array","d","i","x","toISOString","y","Math","random","Chart","ariaDesc","ariaTitle","containerComponent","ChartVoronoiContainer","labels","datum","constrainToVisibleArea","legendData","legendOrientation","legendPosition","maxDomain","bottom","left","right","top","ChartAxis","fixLabelOverlap","tickFormat","val","getFullYear","getMonth","getDay","tickCount","dependentAxis","showGrid","ChartGroup","ChartArea","interpolation","MetricsDashboard","activeTabKey","setActiveTabKey","isBox","setIsBox","backgroundColor","Tabs","activeKey","tabIndex","Tab","eventKey","TabTitleText","MyAreaChart","marginTop","Checkbox","label","isChecked","onChange","checked","TopUtilization","Progress","value","min","max","measureLocation","ProgressMeasureLocation","valueText","ProgressVariant","success","danger","MySparklineChart","ChartThemeColor","color","themeColor","ChartContainer","ChartLabel","dy","PerformanceSummary","ThresholdChart","state","used","this","interval","setInterval","setState","clearInterval","ChartDonutThreshold","ChartDonutUtilization","subTitle","thresholds","React","Component","th","colors","bands","length","bars","ChartBar","barWidth","PanelSummary","Grid","GridItem","span","overflow","paddingLeft","rowSpan","MySparklineBarChart","CardFooter","MyDonutUtilizationChart","SimpleTable","columns","rows","row","Fragment","parseInt","cells","column","Table","borders","Pagination","isCompact","itemCount","widgetId","page","PaginationVariant","PanelTable","MyTable","Home","PageSection","PageSectionVariants","light","TextContent","DashboardView","lazy","TableView","NetworkServicesView","ServersView","BasicNotificationDrawer","onDropdownToggle","onDropdownSelect","onKebabDropdownToggle","onKebabDropdownSelect","onNavSelect","prevState","getNumberUnread","markAllRead","res","pageId","PageSkipToContent","SkipToContent","href","PageBreadcrumb","Breadcrumb","BreadcrumbItem","to","Page","header","sidebar","isManagedSidebar","notificationDrawer","isNotificationDrawerExpanded","skipToContent","breadcrumb","mainContainerId","fallback","path","exact","HomeView","render","withRouter","isNavOpen","onNavToggle","logoProps","Sidebar","PageGroup","PageNavigation","dark","routesView","routes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.178b88b7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/datacenter-logo.11a825ca.png\";","import React from 'react';\r\nimport { Brand } from '@patternfly/react-core';\r\nimport pfLogo from '../../assets/datacenter-logo.png';\r\n\r\nconst logo = () => <Brand src={pfLogo} alt=\"Datacenter Logo\" />\r\n\r\nexport default logo;","export default __webpack_public_path__ + \"static/media/avatar.3a24bd27.png\";","import { useState } from 'react';\r\nimport { NotificationBadge, PopoverPosition } from '@patternfly/react-core';\r\nimport BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';\r\n\r\nconst NotBadge = (props) => {\r\n  const [count, setCount] = useState(30);\r\n  const [variant, setVariant] = useState('read');\r\n  const [variantId, setVariantId] = useState(0);\r\n  const variants = ['read', 'unread', 'attention']\r\n  const onClick = () => {\r\n    setCount(count+1)\r\n    setVariant(variants[variantId%3])\r\n    setVariantId(variantId+1)\r\n  };\r\n\r\n  return (\r\n    <div className=\"pf-t-dark\" onClick={props.onToggle}>\r\n      <NotificationBadge \r\n        variant={variant} \r\n        onClick={onClick} \r\n        aria-label=\"First notifications\" \r\n        count={count} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotBadge;","import React, { useState } from 'react';\r\nimport {\r\n  Avatar,\r\n  Brand,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  Button,\r\n  ButtonVariant,\r\n  Card,\r\n  CardBody,\r\n  Drawer,\r\n  DrawerContent,\r\n  DrawerContentBody,\r\n  Dropdown,\r\n  DropdownGroup,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownSeparator,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  EmptyStatePrimary,\r\n  Gallery,\r\n  GalleryItem,\r\n  KebabToggle,\r\n  Nav,\r\n  NavItem,\r\n  NavList,\r\n  NotificationBadge,\r\n  NotificationDrawer,\r\n  NotificationDrawerBody,\r\n  NotificationDrawerHeader,\r\n  NotificationDrawerList,\r\n  NotificationDrawerListItem,\r\n  NotificationDrawerListItemBody,\r\n  NotificationDrawerListItemHeader,\r\n  Page,\r\n  PageHeader,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  PageSidebar,\r\n  SkipToContent,\r\n  TextContent,\r\n  Text,\r\n  Title,\r\n  PageHeaderTools,\r\n  PageHeaderToolsGroup,\r\n  PageHeaderToolsItem\r\n} from '@patternfly/react-core';\r\nimport { css } from '@patternfly/react-styles';\r\nimport BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';\r\nimport CogIcon from '@patternfly/react-icons/dist/js/icons/cog-icon';\r\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\r\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\r\n//import imgBrand from '@patternfly/react-core/src/components/Brand/examples/pfLogo.svg';\r\n//import imgAvatar from '@patternfly/react-core/src/components/Avatar/examples/avatarImg.svg';\r\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\r\n\r\n//import imgBrand from '../assets/datacenter-logo.png'\r\nimport imgAvatar from '../assets/avatar.png'\r\n\r\nimport Logo from '../components/UI/Logo'\r\n\r\nimport MyNotificationBadge from '../components/UI/MyNotificationBadge'\r\n\r\nconst Header = (props) => {\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\r\n  const [isKebabDropdownOpen, setIsKebabDropdownOpen] = useState(false)\r\n  const [isDrawerExpanded, setIsDrawerExpanded] = useState(false)\r\n\r\n  const getNumberUnread = () => {\r\n    let isUnreadMap = {\r\n      'notification-1': true,\r\n      'notification-2': true\r\n    }\r\n    if (isUnreadMap === null) return 0;\r\n    return Object.keys(isUnreadMap).reduce((count, id) => {\r\n      return isUnreadMap[id] ? count + 1 : count;\r\n    }, 0);\r\n  }\r\n\r\n  const onDropdownToggle = isDropdownOpen => {\r\n    setIsDropdownOpen(isDropdownOpen)\r\n  };\r\n  const onDropdownSelect = event => {\r\n    setIsDropdownOpen(!isDropdownOpen)\r\n  };\r\n  const onKebabDropdownSelect = event => {\r\n    setIsKebabDropdownOpen(!isKebabDropdownOpen)\r\n  };\r\n  const onKebabDropdownToggle = isKebabDropdownOpen => {\r\n    setIsKebabDropdownOpen(isKebabDropdownOpen)\r\n  };\r\n\r\n  const kebabDropdownItems = [\r\n    <DropdownItem>\r\n      <CogIcon /> Settings\r\n    </DropdownItem>,\r\n    <DropdownItem>\r\n      <HelpIcon /> Help\r\n    </DropdownItem>\r\n  ];\r\n  const userDropdownItems = [\r\n    <DropdownGroup key=\"group 2\">\r\n      <DropdownItem key=\"group 2 profile\">My profile</DropdownItem>\r\n      <DropdownItem key=\"group 2 user\" component=\"button\">\r\n        User management\r\n      </DropdownItem>\r\n      <DropdownItem key=\"group 2 logout\">Logout</DropdownItem>\r\n    </DropdownGroup>\r\n  ];\r\n  const headerTools = (\r\n    <PageHeaderTools>\r\n      <PageHeaderToolsItem visibility={{default: 'visible'}} isSelected={isDrawerExpanded}>\r\n        {/*<NotificationBadge variant={getNumberUnread() === 0 ? 'read' : 'unread'} \r\n                          onClick={props.onCloseNotificationDrawer} aria-label=\"Notifications\">\r\n          <BellIcon />\r\n          </NotificationBadge>*/}\r\n        <MyNotificationBadge onToggle={props.onCloseNotificationDrawer}/>\r\n      </PageHeaderToolsItem>\r\n      <PageHeaderToolsGroup\r\n        visibility={{\r\n          default: 'hidden',\r\n          lg: 'visible'\r\n        }} /** the settings and help icon buttons are only visible on desktop sizes and replaced by a kebab dropdown for other sizes */\r\n      >\r\n        <PageHeaderToolsItem>\r\n          <Button aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\r\n            <CogIcon />\r\n          </Button>\r\n        </PageHeaderToolsItem>\r\n        <PageHeaderToolsItem>\r\n          <Button aria-label=\"Help actions\" variant={ButtonVariant.plain}>\r\n            <HelpIcon />\r\n          </Button>\r\n        </PageHeaderToolsItem>\r\n      </PageHeaderToolsGroup>\r\n      <PageHeaderToolsGroup>\r\n        <PageHeaderToolsItem\r\n          visibility={{\r\n            lg: 'hidden'\r\n          }} /** this kebab dropdown replaces the icon buttons and is hidden for desktop sizes */\r\n        >\r\n          <Dropdown\r\n            isPlain\r\n            position=\"right\"\r\n            onSelect={onKebabDropdownSelect}\r\n            toggle={<KebabToggle onToggle={onKebabDropdownToggle} />}\r\n            isOpen={isKebabDropdownOpen}\r\n            dropdownItems={kebabDropdownItems}\r\n          />\r\n        </PageHeaderToolsItem>\r\n        <PageHeaderToolsItem\r\n          visibility={{ default: 'hidden', md: 'visible' }} /** this user dropdown is hidden on mobile sizes */\r\n        >\r\n          <Dropdown\r\n            isPlain\r\n            position=\"right\"\r\n            onSelect={onDropdownSelect}\r\n            isOpen={isDropdownOpen}\r\n            toggle={<DropdownToggle onToggle={onDropdownToggle}>Carlos Aguni</DropdownToggle>}\r\n            dropdownItems={userDropdownItems}\r\n          />\r\n        </PageHeaderToolsItem>\r\n      </PageHeaderToolsGroup>\r\n      <Avatar src={imgAvatar} alt=\"Avatar image\" />\r\n    </PageHeaderTools>\r\n  );\r\n  return (\r\n    <PageHeader \r\n            logo={<Logo />}\r\n            headerTools={headerTools} \r\n            showNavToggle />\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport {\r\n  Avatar,\r\n  Brand,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  Button,\r\n  ButtonVariant,\r\n  Card,\r\n  CardBody,\r\n  Drawer,\r\n  DrawerContent,\r\n  DrawerContentBody,\r\n  Dropdown,\r\n  DropdownGroup,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownSeparator,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  EmptyStatePrimary,\r\n  Gallery,\r\n  GalleryItem,\r\n  KebabToggle,\r\n  Nav,\r\n  NavItem,\r\n  NavList,\r\n  NotificationBadge,\r\n  NotificationDrawer,\r\n  NotificationDrawerBody,\r\n  NotificationDrawerHeader,\r\n  NotificationDrawerList,\r\n  NotificationDrawerListItem,\r\n  NotificationDrawerListItemBody,\r\n  NotificationDrawerListItemHeader,\r\n  Page,\r\n  PageHeader,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  PageSidebar,\r\n  SkipToContent,\r\n  TextContent,\r\n  Text,\r\n  Title,\r\n  PageHeaderTools,\r\n  PageHeaderToolsGroup,\r\n  PageHeaderToolsItem\r\n} from '@patternfly/react-core';\r\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\r\n\r\nconst MyNotificationDrawer = (props) => {\r\n  const [isActionsMenuOpen, setIsActionsMenuOpen] = useState(null)\r\n  const [showNotifications, setShowNotifications] = useState(true)\r\n  const [isUnreadMap, setIsUnreadMap] = useState({\r\n    'notification-1': true,\r\n    'notification-2': true,\r\n  })\r\n  const DropdownPosition = {\r\n    right: 'right'\r\n  }\r\n  const DropdownDirection = {\r\n    up: 'up',\r\n    down: 'down'\r\n  }\r\n  const EmptyStateVariant = {\r\n    full: 'full'\r\n  }\r\n\r\n  const onToggle = (id, isOpen) => {\r\n    setIsActionsMenuOpen({ [id]: isOpen })\r\n  };\r\n  \r\n  const onSelect = event => {\r\n    setIsActionsMenuOpen(null)\r\n  };\r\n\r\n  const onListItemClick = (id) => {\r\n    if (!isUnreadMap) return\r\n    setIsUnreadMap({\r\n      ...isUnreadMap,\r\n      [id]: false,\r\n    })\r\n  }\r\n\r\n  const getNumberUnread = () => {\r\n    if (isUnreadMap === null) return 0;\r\n    return Object.keys(isUnreadMap).reduce((count, id) => {\r\n      return isUnreadMap[id] ? count + 1 : count;\r\n    }, 0);\r\n  }\r\n\r\n  const markAllRead = () => {\r\n    setIsUnreadMap(null)\r\n  }\r\n  \r\n  const fshowNotifications = (showNotifications) => {\r\n    setIsUnreadMap(null)\r\n    setShowNotifications(showNotifications)\r\n  }\r\n\r\n  const notificationDrawerActions = [\r\n    <DropdownItem key=\"markAllRead\" onClick={markAllRead} component=\"button\">\r\n      Mark all read\r\n    </DropdownItem>,\r\n    <DropdownItem key=\"clearAll\" onClick={() => fshowNotifications(false)} component=\"button\">\r\n      Clear all\r\n    </DropdownItem>,\r\n    <DropdownItem key=\"unclearLast\" onClick={() => fshowNotifications(true)}component=\"button\">\r\n      Unclear last\r\n    </DropdownItem>,\r\n    <DropdownItem key=\"settings\" component=\"button\">\r\n      Settings\r\n    </DropdownItem>,\r\n  ];\r\n  \r\n  const notificationDrawerDropdownItems = [\r\n    <DropdownItem key=\"link\">Link</DropdownItem>,\r\n    <DropdownItem key=\"action\" component=\"button\">\r\n      Action\r\n    </DropdownItem>,\r\n    <DropdownSeparator key=\"separator\" />,\r\n    <DropdownItem key=\"disabled link\" isDisabled>\r\n      Disabled Link\r\n    </DropdownItem>\r\n  ];\r\n\r\n  return (\r\n    <NotificationDrawer>\r\n      <NotificationDrawerHeader count={getNumberUnread()} \r\n                                onClose={props.onCloseNotificationDrawer}>\r\n        <Dropdown\r\n          onSelect={onSelect}\r\n          toggle={<KebabToggle onToggle={isOpen => onToggle('toggle-id-0', isOpen)} id=\"toggle-id-0\" />}\r\n          isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-0']}\r\n          isPlain\r\n          dropdownItems={notificationDrawerActions}\r\n          id=\"notification-0\"\r\n          position={DropdownPosition.right}\r\n        />\r\n      </NotificationDrawerHeader>\r\n      <NotificationDrawerBody>\r\n        {showNotifications && (\r\n          <NotificationDrawerList>\r\n            <NotificationDrawerListItem variant=\"info\" onClick={() => onListItemClick(\"notification-1\")} isRead={isUnreadMap === null || !isUnreadMap[\"notification-1\"]}>\r\n              <NotificationDrawerListItemHeader\r\n                variant=\"info\"\r\n                title=\"Unread info notification title\"\r\n                srTitle=\"Info notification:\"\r\n              >\r\n                <Dropdown\r\n                  position={DropdownPosition.right}\r\n                  onSelect={onSelect}\r\n                  toggle={<KebabToggle onToggle={isOpen => onToggle('toggle-id-1', isOpen)} id=\"toggle-id-1\" />}\r\n                  isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-1']}\r\n                  isPlain\r\n                  dropdownItems={notificationDrawerDropdownItems}\r\n                  id=\"notification-1\"\r\n                />\r\n              </NotificationDrawerListItemHeader>\r\n              <NotificationDrawerListItemBody timestamp=\"5 minutes ago\">\r\n                This is an info notification description.\r\n              </NotificationDrawerListItemBody>\r\n            </NotificationDrawerListItem>\r\n            <NotificationDrawerListItem variant=\"danger\" onClick={() => onListItemClick(\"notification-2\")} isRead={isUnreadMap === null || !isUnreadMap[\"notification-2\"]}>\r\n              <NotificationDrawerListItemHeader\r\n                variant=\"danger\"\r\n                title=\"Unread danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\"\r\n                srTitle=\"Danger notification:\"\r\n              >\r\n                <Dropdown\r\n                  position={DropdownPosition.right}\r\n                  onSelect={onSelect}\r\n                  toggle={<KebabToggle onToggle={isOpen => onToggle('toggle-id-2', isOpen)} id=\"toggle-id-2\" />}\r\n                  isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-2']}\r\n                  isPlain\r\n                  dropdownItems={notificationDrawerDropdownItems}\r\n                  id=\"notification-2\"\r\n                />\r\n              </NotificationDrawerListItemHeader>\r\n              <NotificationDrawerListItemBody timestamp=\"10 minutes ago\">\r\n                This is a danger notification description. This is a long description to show how the title will wrap if\r\n                it is long and wraps to multiple lines.\r\n              </NotificationDrawerListItemBody>\r\n            </NotificationDrawerListItem>\r\n            <NotificationDrawerListItem variant=\"warning\" onClick={() => onListItemClick(\"notification-3\")} isRead={isUnreadMap === null || !isUnreadMap[\"notification-3\"]}>\r\n              <NotificationDrawerListItemHeader\r\n                variant=\"warning\"\r\n                title=\"Read warning notification title\"\r\n                srTitle=\"Warning notification:\"\r\n              >\r\n                <Dropdown\r\n                  position={DropdownPosition.right}\r\n                  onSelect={onSelect}\r\n                  toggle={<KebabToggle onToggle={isOpen => onToggle('toggle-id-3', isOpen)} id=\"toggle-id-3\" />}\r\n                  isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-3']}\r\n                  isPlain\r\n                  dropdownItems={notificationDrawerDropdownItems}\r\n                  id=\"notification-3\"\r\n                />\r\n              </NotificationDrawerListItemHeader>\r\n              <NotificationDrawerListItemBody timestamp=\"20 minutes ago\">\r\n                This is a warning notification description.\r\n              </NotificationDrawerListItemBody>\r\n            </NotificationDrawerListItem>\r\n            <NotificationDrawerListItem variant=\"success\" onClick={() => onListItemClick(\"notification-4\")} isRead={isUnreadMap === null || !isUnreadMap[\"notification-4\"]}>\r\n              <NotificationDrawerListItemHeader\r\n                variant=\"success\"\r\n                title=\"Read success notification title\"\r\n                srTitle=\"Success notification:\"\r\n              >\r\n                <Dropdown\r\n                  position={DropdownPosition.right}\r\n                  direction={DropdownDirection.up}\r\n                  onSelect={onSelect}\r\n                  toggle={<KebabToggle onToggle={isOpen => onToggle('toggle-id-4', isOpen)} id=\"toggle-id-4\" />}\r\n                  isOpen={isActionsMenuOpen && isActionsMenuOpen['toggle-id-4']}\r\n                  isPlain\r\n                  dropdownItems={notificationDrawerDropdownItems}\r\n                  id=\"notification-4\"\r\n                />\r\n              </NotificationDrawerListItemHeader>\r\n              <NotificationDrawerListItemBody timestamp=\"30 minutes ago\">\r\n                This is a success notification description.\r\n              </NotificationDrawerListItemBody>\r\n            </NotificationDrawerListItem>\r\n          </NotificationDrawerList>\r\n        )}\r\n        {!showNotifications && (\r\n          <EmptyState variant={EmptyStateVariant.full}>\r\n            <EmptyStateIcon icon={SearchIcon} />\r\n            <Title headingLevel=\"h2\" size=\"lg\">\r\n              No alerts found\r\n            </Title>\r\n            <EmptyStateBody>\r\n              There are currently no alerts. There may be silenced critical alerts however.\r\n            </EmptyStateBody>\r\n            <EmptyStatePrimary>\r\n              <Button variant=\"link\">Action</Button>\r\n            </EmptyStatePrimary>\r\n          </EmptyState>\r\n        )}\r\n      </NotificationDrawerBody>\r\n    </NotificationDrawer>\r\n  );\r\n}\r\n\r\n\r\nexport default MyNotificationDrawer;","import React, { useState } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport {\r\n  Avatar,\r\n  Brand,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  Button,\r\n  ButtonVariant,\r\n  Card,\r\n  CardBody,\r\n  Drawer,\r\n  DrawerContent,\r\n  DrawerContentBody,\r\n  Dropdown,\r\n  DropdownGroup,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownSeparator,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  EmptyStatePrimary,\r\n  Gallery,\r\n  GalleryItem,\r\n  KebabToggle,\r\n  Nav,\r\n  NavItem,\r\n  NavList,\r\n  NotificationBadge,\r\n  NotificationDrawer,\r\n  NotificationDrawerBody,\r\n  NotificationDrawerHeader,\r\n  NotificationDrawerList,\r\n  NotificationDrawerListItem,\r\n  NotificationDrawerListItemBody,\r\n  NotificationDrawerListItemHeader,\r\n  Page,\r\n  PageHeader,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  PageSidebar,\r\n  SkipToContent,\r\n  TextContent,\r\n  Text,\r\n  Title,\r\n  PageHeaderTools,\r\n  PageHeaderToolsGroup,\r\n  PageHeaderToolsItem,\r\n  ContextSelectorItem\r\n} from '@patternfly/react-core';\r\nimport { css } from '@patternfly/react-styles';\r\nimport BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';\r\nimport CogIcon from '@patternfly/react-icons/dist/js/icons/cog-icon';\r\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\r\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\r\n//import imgBrand from '@patternfly/react-core/src/components/Brand/examples/pfLogo.svg';\r\n\r\nconst MySidebar = (props) => {\r\n  const [activeItem, setActiveItem] = useState(0)  \r\n\r\n  const onNavSelect = result => {\r\n    setActiveItem(result.itemId)\r\n    console.log(result)\r\n    const toroute = result.event.target.outerText.toLowerCase().replace(/\\s+/g, '-')\r\n    console.log(toroute)\r\n    props.history.push(`/${toroute}`)\r\n  };\r\n\r\n  //let routeList = \r\n  const navList = [\r\n    'Home',\r\n    'Dashboard', \r\n    'Table',\r\n    'Network Services',\r\n    'Servers',\r\n    'demo/page/group-page'\r\n  ]\r\n\r\n  const navItems = navList.map((e,idx) => {\r\n    return (<NavItem key={idx} itemId={idx} isActive={activeItem === idx}>\r\n      {e}\r\n    </NavItem>)\r\n  })\r\n\r\n  console.log(navItems)\r\n\r\n  const PageNav = (\r\n    <Nav onSelect={onNavSelect} aria-label=\"Nav\">\r\n      <NavList>\r\n        {navItems}\r\n      </NavList>\r\n    </Nav>\r\n  );\r\n\r\n    //const Sidebar = <PageSidebar nav={PageNav} />;\r\n\r\n    return <PageSidebar nav={PageNav}/>\r\n\r\n}\r\n\r\n\r\nexport default MySidebar;","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardTitle,\r\n  CardBody,\r\n  Text,\r\n  ContextSelector,\r\n} from '@patternfly/react-core'\r\n\r\nimport ShieldIcon from '@patternfly/react-icons/dist/js/icons/shield-alt-icon';\r\nimport ExclamationIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\r\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\r\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\r\n\r\nimport * as PatternflyIcons from '@patternfly/react-icons/dist/js/icons/';\r\n\r\n\r\nconst componentMap = key => {\r\n  let iconStyle = {\r\n    width: '15px',\r\n    height: '15px',\r\n  }\r\n  const mapKey = {\r\n    warning: {\r\n      key: 'ExclamationTriangleIcon',\r\n      style: {fill: '#F0AB00'}\r\n    },\r\n    error: {\r\n      key: 'TimesCircleIcon',\r\n      style: {fill: '#c9190b'},\r\n    },\r\n    check: {\r\n      key: 'CheckCircleIcon',\r\n      style: {fill: '#6CA100'},\r\n    },\r\n    shield: 'ShieldAltIcon'\r\n  }\r\n  if ((key in mapKey)){\r\n    let mapped = mapKey[key]\r\n    if (typeof(mapped) === String){\r\n      key = mapped\r\n    }else{\r\n      key = mapped.key\r\n      iconStyle = {...iconStyle, ...mapped.style}\r\n    }\r\n  }\r\n  let Comp = PatternflyIcons[key]\r\n  let props = {\r\n    style: iconStyle\r\n  }\r\n  return [Comp, props]\r\n}\r\n\r\nconst MyCard = (props) => {\r\n  /*\r\n  props.meta = {\r\n    title: String,\r\n    badges: [\r\n      {\r\n        iconRef: String,\r\n        value: String\r\n      }\r\n    ]\r\n  }\r\n  */\r\n  const titleStyle = {\r\n    textAlign: 'center',\r\n    margin: 0,\r\n    padding: 0,\r\n    paddingTop: '10px',\r\n    boxSizing: 'border-box',\r\n  }\r\n  const bodyStyle = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: 0, margin: 0,\r\n    padding: '7px',\r\n  }\r\n  const iconStyle = {\r\n    fill: '#c9190b',\r\n    width: '15px',\r\n    height: '15px',\r\n  }\r\n  const barStyle = {\r\n    width: '5px'\r\n  }\r\n  const textStyle = {\r\n    fontSize: '20px', \r\n    fontWeight: '100', \r\n    marginLeft: '10px'\r\n  }\r\n  let renderList = [] \r\n  \r\n  for (let idx in props.meta.badges){\r\n    let elem = props.meta.badges[idx]\r\n    let [Comp, compProps] = componentMap(elem.icon)\r\n    renderList.push((\r\n      <li key={idx}>\r\n        <Comp {...compProps}/>\r\n        <Text style={textStyle}>{elem.text}</Text>\r\n      </li>\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardTitle style={titleStyle}>\r\n        {/*<ShieldIcon /> 3 Data Centers*/}\r\n        {props.meta.title}\r\n      </CardTitle>\r\n      <CardBody style={bodyStyle}>\r\n        <ul className=\"cardStatusList\">\r\n          {renderList}\r\n          {/*<li style={bodyStyle}>\r\n            <TimesCircleIcon {...iconStyle}/> \r\n            <Text style={{fontSize: '25px', fontWeight: '100', marginLeft: '10px'}}>2</Text>\r\n          </li>\r\n          <li style={bodyStyle}>\r\n            <ExclamationTriangleIcon {...{...iconStyle, fill: '#F0AB00'}}/> \r\n            <Text style={{}}>4</Text>\r\n          </li>\r\n          */}\r\n        </ul> \r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\n\r\nexport default MyCard;","\r\n\r\n\r\nexport default {\r\n  \"white\":\"#FFFFFF\",\r\n  \"black-100\":\"#FAFAFA\",\r\n  \"black-150\":\"#F5F5F5\",\r\n  \"black-200\":\"#F0F0F0\",\r\n  \"black-300\":\"#D2D2D2\",\r\n  \"black-400\":\"#B8BBBE\",\r\n  \"black-500\":\"#8A8D90\",\r\n  \"black-600\":\"#6A6E73\",\r\n  \"black-700\":\"#4F5255\",\r\n  \"black-800\":\"#3C3F42\",\r\n  \"black-850\":\"#212427\",\r\n  \"black-900\":\"#151515\",\r\n  \"black-1000\":\"#030303\",\r\n  \"blue-50\":\"#E7F1FA\",\r\n  \"blue-100\":\"#BEE1F4\",\r\n  \"blue-200\":\"#73BCF7\",\r\n  \"blue-300\":\"#2B9AF3\",\r\n  \"blue-400\":\"#0066CC\",\r\n  \"blue-500\":\"#004080\",\r\n  \"blue-600\":\"#002952\",\r\n  \"blue-700\":\"#001223\",\r\n  \"green-50\":\"#F3FAF2\",\r\n  \"green-100\":\"#BDE5B8\",\r\n  \"green-200\":\"#95D58E\",\r\n  \"green-300\":\"#6EC664\",\r\n  \"green-400\":\"#5BA352\",\r\n  \"green-500\":\"#3E8635\",\r\n  \"green-600\":\"#1E4F18\",\r\n  \"green-700\":\"#0F280D\",\r\n  \"cyan-50\":\"#F2F9F9\",\r\n  \"cyan-100\":\"#A2D9D9\",\r\n  \"cyan-200\":\"#73C5C5\",\r\n  \"cyan-300\":\"#009596\",\r\n  \"cyan-400\":\"#005F60\",\r\n  \"cyan-500\":\"#003737\",\r\n  \"cyan-600\":\"#002323\",\r\n  \"cyan-700\":\"#000F0F\",\r\n  \"purple-50\":\"#F2F0FC\",\r\n  \"purple-100\":\"#CBC1FF\",\r\n  \"purple-200\":\"#B2A3FF\",\r\n  \"purple-300\":\"#A18FFF\",\r\n  \"purple-400\":\"#8476D1\",\r\n  \"purple-500\":\"#6753AC\",\r\n  \"purple-600\":\"#40199A\",\r\n  \"purple-700\":\"#1F0066\",\r\n  \"light-blue-100\":\"#BEEDF9\",\r\n  \"light-blue-200\":\"#7CDBF3\",\r\n  \"light-blue-300\":\"#35CAED\",\r\n  \"light-blue-400\":\"#00B9E4\",\r\n  \"light-blue-500\":\"#008BAD\",\r\n  \"light-blue-600\":\"#005C73\",\r\n  \"light-blue-700\":\"#002D39\",\r\n  \"gold-50\":\"#FDF7E7\",\r\n  \"gold-100\":\"#F9E0A2\",\r\n  \"gold-200\":\"#F6D173\",\r\n  \"gold-300\":\"#F4C145\",\r\n  \"gold-400\":\"#F0AB00\",\r\n  \"gold-500\":\"#C58C00\",\r\n  \"gold-600\":\"#795600\",\r\n  \"gold-700\":\"#3D2C00\",\r\n  \"light-green-100\":\"#E4F5BC\",\r\n  \"light-green-200\":\"#C8EB79\",\r\n  \"light-green-300\":\"#ACE12E\",\r\n  \"light-green-400\":\"#92D400\",\r\n  \"light-green-500\":\"#6CA100\",\r\n  \"light-green-600\":\"#486B00\",\r\n  \"light-green-700\":\"#253600\",\r\n  \"orange-100\":\"#F4B678\",\r\n  \"orange-200\":\"#EF9234\",\r\n  \"orange-300\":\"#EC7A08\",\r\n  \"orange-400\":\"#C46100\",\r\n  \"orange-500\":\"#8F4700\",\r\n  \"orange-600\":\"#773D00\",\r\n  \"orange-700\":\"#3B1F00\",\r\n  \"red-50\":\"#FAEAE8\",\r\n  \"red-100\":\"#C9190B\",\r\n  \"red-200\":\"#A30000\",\r\n  \"red-300\":\"#7D1007\",\r\n  \"red-400\":\"#470000\",\r\n  \"red-500\":\"#2C0000\"\r\n}","\r\nimport * as PatternflyIcons from '@patternfly/react-icons/dist/js/icons/';\r\nimport defaultColors from '../shared/colors'\r\n\r\nconst keyMap = {\r\n  'shield': 'ShieldAltIcon'\r\n}\r\n\r\nexport default (iconKey, props={}) => {\r\n\r\n  if ((iconKey in keyMap)){\r\n    iconKey = keyMap[iconKey]\r\n  }\r\n\r\n  if ((iconKey in PatternflyIcons)){\r\n    const Comp = PatternflyIcons[iconKey]\r\n    if (props && props.fill && \r\n          (props.fill in defaultColors)){\r\n      props.fill = defaultColors[props.fill]\r\n    }\r\n\r\n    return <Comp {...props}/>\r\n  }\r\n  return null\r\n}","import React from 'react';\r\nimport {\r\n  Gallery,\r\n  GalleryItem,\r\n} from '@patternfly/react-core';\r\n\r\nimport MyCard from '../../components/UI/MyCard'\r\nimport LoadIcon from '../../utils/LoadIcon';\r\n\r\nconst TopGallery = (props) => {\r\n  const GalleryItems = [\r\n    {\r\n      title: [LoadIcon('shield'), \" 3 Data Centers\"],\r\n      badges: [\r\n        { icon: 'warning', text: '' },\r\n        { icon: 'error', text: '3' },\r\n        { icon: 'check', text: '3' },\r\n      ]\r\n    },\r\n    {\r\n      title: [LoadIcon('shield'), \" 5 Clusters\"],\r\n      badges: [\r\n        { icon: 'check', text: '' },\r\n      ]\r\n    },\r\n    {\r\n      title: [LoadIcon('shield'), \" 50 Hosts\"],\r\n      badges: [\r\n        { icon: 'error', text: '1' },\r\n        { icon: 'warning', text: '15' },\r\n      ]\r\n    },\r\n    {\r\n      title: [LoadIcon('shield'), \" 5 Storage Domains\"],\r\n      badges: [\r\n        { icon: 'error', text: '1' },\r\n      ]\r\n    },\r\n    {\r\n      title: [LoadIcon('shield'), \" 100 Virtual Machines\"],\r\n      badges: [\r\n        { icon: 'check', text: '' },\r\n      ]\r\n    },\r\n    {\r\n      title: [LoadIcon('shield'), \" 100 Networks\"],\r\n      badges: [\r\n        { icon: 'check', text: '' },\r\n      ]\r\n    },\r\n  ]\r\n\r\n  const GalleryItemsElems = GalleryItems.map((elem, idx) => {\r\n    return (\r\n      <GalleryItem key={idx}>\r\n        <MyCard meta={elem}/>\r\n      </GalleryItem>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <Gallery hasGutter className={'TopGalleryCards'}>\r\n      {GalleryItemsElems}\r\n    </Gallery>\r\n  )\r\n}\r\n\r\nexport default TopGallery;","import React from 'react';\r\nimport { Chart, ChartArea, ChartAxis, ChartGroup, ChartVoronoiContainer } from '@patternfly/react-charts';\r\n// import '@patternfly/patternfly/patternfly-charts.css'; // Required for mix-blend-mode CSS property\r\n\r\nconst BasicWithRightAlignedLegend = (props) => {\r\n  const divStyle = {\r\n    height: '215px',\r\n    width: '100%',\r\n  } \r\n  const name = (props.name) ? props.name : 'Random'\r\n  let startDate = new Date().getTime()\r\n  let data = [...Array(20)].map((d,i) => {\r\n    return {\r\n      name: name,\r\n      x: new Date(startDate + i*3600000).toISOString(),\r\n      //x: i,\r\n      y: Math.random()*1000\r\n    }\r\n  })\r\n  return (\r\n  <div style={divStyle}>\r\n      <Chart\r\n        ariaDesc=\"Average number of pets\"\r\n        ariaTitle=\"Area chart example\"\r\n        containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />}\r\n        //legendData={[{ name: 'Cats' }, { name: 'Dogs' }, { name: 'Birds' }]}\r\n        legendData={[{ name: name }]}\r\n        legendOrientation=\"vertical\"\r\n        legendPosition=\"right\"\r\n        height={300}\r\n        maxDomain={{y: 1000}}\r\n        padding={{\r\n          bottom: 30,\r\n          left: 50,\r\n          right: 100, // Adjusted to accommodate legend\r\n          top: 10\r\n        }}\r\n        width={1000}\r\n      >\r\n        <ChartAxis \r\n          fixLabelOverlap \r\n          tickFormat={(val) => {\r\n            let d = new Date(val)\r\n            return `${d.getFullYear()}-${d.getMonth()}-${d.getDay()}`\r\n          }} \r\n          tickCount={3}/>\r\n        <ChartAxis dependentAxis showGrid />\r\n        <ChartGroup>\r\n          <ChartArea\r\n            data={data}\r\n            interpolation=\"monotoneX\"\r\n          />\r\n          {/*<ChartArea\r\n            data={[\r\n              { name: 'Birds', x: '2015', y: 1 },\r\n              { name: 'Birds', x: '2016', y: 2 },\r\n              { name: 'Birds', x: '2017', y: 3 },\r\n              { name: 'Birds', x: '2018', y: 2 },\r\n              { name: 'Birds', x: '2019', y: 4 }\r\n            ]}\r\n            interpolation=\"monotoneX\"\r\n          /> */}\r\n        </ChartGroup>\r\n      </Chart>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BasicWithRightAlignedLegend;","import React, { useState } from 'react';\r\nimport { \r\n  Tabs, \r\n  Tab, \r\n  TabTitleText, \r\n  Checkbox,\r\n  Card,\r\n  CardBody,\r\n} from '@patternfly/react-core';\r\n\r\nimport MyAreaChart from '../../components/UI/Charts/MyAreaChart'\r\n\r\nconst MetricsDashboard = (props) => {\r\n  const [activeTabKey, setActiveTabKey] = useState(0)\r\n  const [isBox, setIsBox] = useState(false)\r\n\r\n  const handleTabClick = (event, tabIndex) => {\r\n    setActiveTabKey(tabIndex)\r\n  };\r\n\r\n  const toggleBox = checked => {\r\n    setIsBox(checked)\r\n  };\r\n\r\n  return (\r\n    <Card style={{backgroundColor: 'white'}}>\r\n      <CardBody>\r\n      <Tabs activeKey={activeTabKey} onSelect={handleTabClick} isBox={isBox}>\r\n        <Tab eventKey={0} title={<TabTitleText>Users</TabTitleText>}>\r\n          <br/>\r\n          <MyAreaChart name=\"User\"/>\r\n        </Tab>\r\n        <Tab eventKey={1} title={<TabTitleText>Containers</TabTitleText>}>\r\n          <br/>\r\n          <MyAreaChart name=\"Container\"/>\r\n        </Tab>\r\n        <Tab eventKey={2} title={<TabTitleText>Database</TabTitleText>}>\r\n          <br/>\r\n          <MyAreaChart name=\"Database\"/>\r\n        </Tab>\r\n        <Tab eventKey={3} title={<TabTitleText>Server</TabTitleText>}>\r\n          <br/>\r\n          <MyAreaChart name=\"User\"/>\r\n        </Tab>\r\n        <Tab eventKey={4} title={<TabTitleText>System</TabTitleText>}>\r\n          <br/>\r\n          <MyAreaChart name=\"System\"/>\r\n        </Tab>\r\n        <Tab eventKey={6} title={<TabTitleText>Network</TabTitleText>}>\r\n          <br/>\r\n          <MyAreaChart name=\"Network\"/>\r\n        </Tab>\r\n      </Tabs>\r\n      <div style={{marginTop: \"20px\"}}>\r\n        <Checkbox\r\n            label=\"isBox\"\r\n            isChecked={isBox}\r\n            onChange={toggleBox}\r\n            aria-label=\"show box variation checkbox\"\r\n            id=\"toggle-box\"\r\n            name=\"toggle-box\"\r\n          />\r\n      </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\nexport default MetricsDashboard;","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardTitle,\r\n  CardBody,\r\n  Progress,\r\n  ProgressSize,\r\n  ProgressMeasureLocation,\r\n  ProgressVariant,\r\n} from '@patternfly/react-core';\r\n\r\n\r\n\r\n\r\nconst TopUtilization = (props) => {\r\n  const Basic = () => <Progress value={33} title=\"CentOS 7.7\" />\r\n  const FiniteStep = () => <Progress value={2} min={0} max={5} title=\"CentOS 8.2\" measureLocation={ProgressMeasureLocation.top} label=\"2 of 5\" valueText=\"2 of 5\"/>\r\n  const Success = () => <Progress value={100} title=\"Windows 2019\" variant={ProgressVariant.success} />\r\n  const Failure = () => <Progress value={33} title=\"Windows 2016\" variant={ProgressVariant.danger} />\r\n  const Warning = () => <Progress value={90} title=\"AWS\" variant={ProgressVariant.warning} />\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardTitle>\r\n          Top Utilized Clusters\r\n        </CardTitle>\r\n        <CardBody>\r\n          {FiniteStep()}\r\n          {Success()}\r\n          {Failure()}\r\n          {Warning()}\r\n          {Basic()}\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default TopUtilization;","import React from 'react';\r\nimport { \r\n  ChartArea, \r\n  ChartContainer, \r\n  ChartGroup, \r\n  ChartLabel, \r\n  ChartThemeColor, \r\n  ChartVoronoiContainer,\r\n} from '@patternfly/react-charts';\r\n\r\nconst MySparklineChart = (props) => {\r\n  console.log(ChartThemeColor) \r\n\r\n  const color = props.color ? props.color : 'blue'\r\n\r\n  const name = (props.name) ? props.name : 'Random'\r\n  let startDate = new Date().getTime()\r\n  let data = [...Array(20)].map((d,i) => {\r\n    return {\r\n      name: name,\r\n      x: new Date(startDate + i*3600000).toISOString(),\r\n      //x: i,\r\n      y: Math.random()*1000\r\n    }\r\n  })\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"ws-react-charts-sparkline-overflow\">\r\n      <div style={{ height: '40px', width: '100%' }}>\r\n        <ChartGroup\r\n          ariaDesc=\"Average number of pets\"\r\n          ariaTitle=\"Sparkline chart example\"\r\n          containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} />}\r\n          height={20}\r\n          //maxDomain={{y: 9}}\r\n          padding={0}\r\n          themeColor={ChartThemeColor[color]}\r\n          width={400}\r\n        >\r\n          <ChartArea\r\n            data={data}\r\n          />\r\n        </ChartGroup>\r\n      </div>\r\n      <ChartContainer height={30}>\r\n        <ChartLabel text={name} dy={15} style={{height: '60px !important'}}/>\r\n      </ChartContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MySparklineChart;","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardTitle,\r\n  CardBody,\r\n\r\n} from '@patternfly/react-core';\r\n\r\nimport MySparklineChart from '../../components/UI/Charts/MySparklineChart'\r\n\r\nconst PerformanceSummary = (props) => {\r\n  return (\r\n    <Card>\r\n      <CardTitle>\r\n        Performance\r\n      </CardTitle>\r\n      <CardBody>\r\n        <MySparklineChart name=\"CPU Utilization\"/>\r\n        <MySparklineChart name=\"Memory%\" color=\"green\"/>\r\n        <MySparklineChart name=\"Network\" color=\"purple\"/>\r\n        <MySparklineChart name=\"IOPS\" color=\"grey\"/>\r\n        <MySparklineChart name=\"Disk Usage\" color=\"gold\"/>\r\n        <MySparklineChart name=\"BurstBalance\" color=\"orange\"/>\r\n        <MySparklineChart name=\"CPUCreditBalance\" color=\"orange\"/>\r\n        <MySparklineChart name=\"Total Clusters\"/>\r\n        <MySparklineChart name=\"Total Disks\"/>\r\n        <MySparklineChart name=\"Storages\" color=\"purple\"/>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default PerformanceSummary;","import React from 'react';\r\nimport { ChartDonutThreshold, ChartDonutUtilization } from '@patternfly/react-charts';\r\nimport { Th } from '@patternfly/react-table';\r\n\r\nclass ThresholdChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      used: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      const { used } = this.state;\r\n      this.setState({ used: (used + 10) % 100 });\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const { used } = this.state;\r\n    return (\r\n      <div style={{ height: '185px', width: '400px' }}>\r\n        <ChartDonutThreshold\r\n          ariaDesc=\"Storage capacity\"\r\n          ariaTitle=\"Donut utilization chart with static threshold example\"\r\n          constrainToVisibleArea={true}\r\n          data={[{ x: 'Warning at 60%', y: 60 }, { x: 'Danger at 90%', y: 90 }]}\r\n          height={185}\r\n          labels={({ datum }) => datum.x ? datum.x : null}\r\n          padding={{\r\n            bottom: 20,\r\n            left: 20,\r\n            right: 260, // Adjusted to accommodate legend\r\n            top: 20\r\n          }}\r\n          width={425}\r\n        >\r\n          <ChartDonutUtilization\r\n            data={{ x: 'Storage capacity', y: used }}\r\n            labels={({ datum }) => datum.x ? `${datum.x}: ${datum.y}%` : null}\r\n            legendData={[{ name: `Storage capacity: ${used}%` }, { name: 'Warning threshold at 60%' }, { name: 'Danger threshold at 90%' }]}\r\n            legendOrientation=\"vertical\"\r\n            subTitle=\"of 100 GBps\"\r\n            title={`${used}%`}\r\n            thresholds={[{ value: 60 }, { value: 90 }]}\r\n          />\r\n        </ChartDonutThreshold>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThresholdChart;","import React from 'react';\r\nimport { \r\n  ChartArea, \r\n  ChartBar,\r\n  ChartContainer, \r\n  ChartGroup, \r\n  ChartLabel, \r\n  ChartThemeColor, \r\n  ChartVoronoiContainer,\r\n} from '@patternfly/react-charts';\r\n\r\nconst MySparklineChart = (props) => {\r\n  console.log(ChartThemeColor) \r\n\r\n  const color = props.color ? props.color : 'blue'\r\n\r\n  const name = (props.name) ? props.name : 'Random'\r\n  let startDate = new Date().getTime()\r\n  let data = [...Array(8)].map((d,i) => {\r\n    return {\r\n      name: name,\r\n      //x: new Date(startDate + i*3600000).toISOString(),\r\n      x: i,\r\n      y: Math.random()*100\r\n    }\r\n  })\r\n\r\n  const th = [20,70]\r\n  const colors = ['#0066CC', '#F4C145', '#A30000']\r\n  const bands = [...Array(th.length+1)].map(() => [])\r\n  console.log('bands', bands)\r\n  for (let i in data){\r\n    if (data[i].y > th[th.length-1]){\r\n      bands[bands.length-1].push(data[i])\r\n      continue\r\n    }\r\n    for (let y in th){\r\n      if (data[i].y < th[y]){\r\n        bands[y].push(data[i])\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log('bands', bands)\r\n\r\n  let bars = []\r\n  for (let i in bands){\r\n    bars.push(\r\n      <ChartBar\r\n        barWidth={10}\r\n        style={{data: {fill: colors[i]}}}\r\n        data={bands[i]}\r\n      />\r\n    )\r\n  }\r\n  \r\n  return (\r\n    <div className=\"ws-react-charts-sparkline-overflow\">\r\n      <div style={{ height: '60px', width: '120px' }}>\r\n        <ChartGroup\r\n          ariaDesc=\"Average number of pets\"\r\n          ariaTitle=\"Sparkline chart example\"\r\n          containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} />}\r\n          height={80}\r\n          //maxDomain={{y: 9}}\r\n          padding={{\r\n            top: 20,\r\n          }}\r\n          themeColor={ChartThemeColor[color]}\r\n          width={90}\r\n        >\r\n          {bars}\r\n        </ChartGroup>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MySparklineChart;\r\n","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardTitle,\r\n  CardBody,\r\n  CardFooter,\r\n  Button,\r\n  Grid,\r\n  GridItem,\r\n  Text,\r\n} from '@patternfly/react-core';\r\n\r\nimport MyDonutUtilizationChart from '../../components/UI/Charts/MyDonutUtilizationChart'\r\n//import MySparklineBarChart from '../../components/UI/Charts/MySparklineBarChart'\r\nimport MySparklineBarChart from './MySparklineBarChart'\r\nimport LoadIcon from '../../utils/LoadIcon'\r\n\r\n\r\nconst PanelSummary = (props) => {\r\n\r\n  return (\r\n    <Grid hasGutter={true}>\r\n      <GridItem span={4}>\r\n        <Card style={{overflow: 'hidden'}}>\r\n          <CardTitle>\r\n            Critical Server Events\r\n          </CardTitle>\r\n          <CardBody>\r\n            <Grid>\r\n              <GridItem span={7} style={{display: 'flex'}}>\r\n                <Text component='h2' style={{fontSize: '27px'}}>\r\n                  625\r\n                </Text>\r\n                <Text component='small' style={{paddingLeft: '2px', paddingTop: '18px'}}>\r\n                  {LoadIcon('ArrowUpIcon', {\r\n                    style: {width: '10px'},\r\n                    variant: 'danger',\r\n                    fill: '#A30000'\r\n                  })}\r\n                  {' '}\r\n                  Up 11%\r\n                </Text>\r\n              </GridItem>\r\n              <GridItem span={5} rowSpan={2}>\r\n                <MySparklineBarChart/>\r\n              </GridItem>\r\n              <GridItem span={7}>\r\n                <Text component='small'>\r\n                  Critical Server Events\r\n                </Text>\r\n              </GridItem>\r\n            </Grid>\r\n          </CardBody>\r\n          <CardFooter>\r\n            <Button variant=\"link\" icon={LoadIcon('FlagIcon')}>\r\n              See more critical events\r\n            </Button>\r\n          </CardFooter>\r\n        </Card>\r\n      </GridItem> \r\n      <GridItem span={8}>\r\n        <Card>\r\n          <CardTitle>\r\n            Storage Utilization\r\n          </CardTitle>\r\n          <CardBody>\r\n            <MyDonutUtilizationChart />\r\n          </CardBody>\r\n          <CardFooter>\r\n            <Button variant=\"link\" icon={LoadIcon('StorageDomainIcon')}>\r\n              Check Other Storages\r\n            </Button>\r\n          </CardFooter>\r\n        </Card>\r\n      </GridItem>\r\n    </Grid>\r\n  )\r\n}\r\n\r\n\r\nexport default PanelSummary;\r\n","import React from 'react';\r\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\r\nimport { \r\n  ToggleGroup, \r\n  ToggleGroupItem,\r\n  Pagination,\r\n  PaginationVariant,\r\n} from '@patternfly/react-core';\r\n\r\nimport LoadIcon from '../../utils/LoadIcon'\r\n\r\nconst SimpleTable = (props) => {\r\n\r\n  const columns = ['Hostname', 'Status', 'IP', 'OS', 'Link'];\r\n\r\n  let rows = []\r\n\r\n  for (let i = 0; i < 10; i++){\r\n    let row = [\r\n      'EC2_'+i,\r\n      (\r\n        <React.Fragment>\r\n        {((parseInt((Math.random() * 100))%2 == 0 ) \r\n              ? LoadIcon('CheckCircleIcon', {fill: 'green'})\r\n              : LoadIcon('ExclamationTriangleIcon', {fill: 'gold-300'}))}\r\n        </React.Fragment>\r\n      ),\r\n      '10.0.0.'+(i+1),\r\n      'RHEL 7',\r\n      LoadIcon('OutlinedArrowAltCircleRightIcon', {fill: 'blue-400'})\r\n    ]\r\n    rows.push({\r\n      cells: row.map((d,idx) => {\r\n        return {\r\n          title: d,\r\n          props: {column: columns[idx]}\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  console.log(rows)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Table\r\n        aria-label=\"Simple Table\"\r\n        variant='compact'\r\n        borders={false}\r\n        cells={columns}\r\n        rows={rows}\r\n      >\r\n        <TableBody />\r\n      </Table>\r\n      <Pagination\r\n        isCompact\r\n        id=\"page-layout-table-column-management-action-toolbar-bottom\"\r\n        itemCount={37}\r\n        widgetId=\"pagination-options-menu-bottom\"\r\n        page={1}\r\n        variant={PaginationVariant.bottom}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SimpleTable;","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardTitle,\r\n  CardBody,\r\n\r\n} from '@patternfly/react-core';\r\n\r\nimport MyTable from './MyTable'\r\n\r\nconst PanelTable = (props) => {\r\n\r\n  return (\r\n    <Card>\r\n      <CardTitle>\r\n        Recently Provisioned EC2\r\n      </CardTitle>\r\n      <CardBody>\r\n        <MyTable/>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\n\r\nexport default PanelTable;\r\n\r\n","import React from 'react';\r\nimport {\r\n  PageSection,\r\n  PageSectionVariants,\r\n  TextContent,\r\n  Text,\r\n  Grid,\r\n  GridItem,\r\n} from '@patternfly/react-core';\r\n\r\nimport TopGallery from './TopGallery'\r\nimport MetricsDashboard from './MetricsDashboard'\r\nimport TopUtilization from './TopUtilization'\r\nimport PerformanceSummary from './PerformanceSummary'\r\nimport PanelSummary from './PanelSummary'\r\nimport PanelTable from './PanelTable'\r\n\r\nconst Home = (props) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <PageSection variant={PageSectionVariants.light}>\r\n        <TextContent>\r\n          <Text component=\"h1\">My Demo Data Center</Text>\r\n          <Text component=\"p\">\r\n            My demo admin dashboard to work as CMDB using Red Hat's Patternfly \r\n            library + React.\r\n          </Text>\r\n        </TextContent>\r\n      </PageSection>\r\n      <PageSection>\r\n        <Grid hasGutter={true}>\r\n          <GridItem span={12}>\r\n            <TopGallery />\r\n          </GridItem>\r\n          <GridItem span={8}>\r\n            <MetricsDashboard />\r\n          </GridItem>\r\n          <GridItem span={4}>\r\n            <TopUtilization />\r\n          </GridItem>\r\n          <GridItem span={8}>\r\n            <PanelSummary />\r\n          </GridItem>\r\n          <GridItem span={4} rowSpan={2}>\r\n            <PerformanceSummary />\r\n          </GridItem>\r\n          <GridItem span={8}>\r\n            <PanelTable />\r\n          </GridItem>\r\n        </Grid>\r\n      </PageSection>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;","import React, { Suspense } from 'react';\r\nimport { Route, Switch, withRouter } from 'react-router-dom';\r\nimport {\r\n  Avatar,\r\n  Brand,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  Button,\r\n  ButtonVariant,\r\n  Card,\r\n  CardBody,\r\n  Drawer,\r\n  DrawerContent,\r\n  DrawerContentBody,\r\n  Dropdown,\r\n  DropdownGroup,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownSeparator,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  EmptyStatePrimary,\r\n  Gallery,\r\n  GalleryItem,\r\n  KebabToggle,\r\n  Nav,\r\n  NavItem,\r\n  NavList,\r\n  NotificationBadge,\r\n  NotificationDrawer,\r\n  NotificationDrawerBody,\r\n  NotificationDrawerHeader,\r\n  NotificationDrawerList,\r\n  NotificationDrawerListItem,\r\n  NotificationDrawerListItemBody,\r\n  NotificationDrawerListItemHeader,\r\n  Page,\r\n  PageHeader,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  PageSidebar,\r\n  SkipToContent,\r\n  TextContent,\r\n  Text,\r\n  Title,\r\n  PageHeaderTools,\r\n  PageHeaderToolsGroup,\r\n  PageHeaderToolsItem\r\n} from '@patternfly/react-core';\r\nimport { css } from '@patternfly/react-styles';\r\nimport BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';\r\nimport CogIcon from '@patternfly/react-icons/dist/js/icons/cog-icon';\r\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\r\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\r\n//import imgBrand from '@patternfly/react-core/src/components/Brand/examples/pfLogo.svg';\r\nimport imgAvatar from '@patternfly/react-core/src/components/Avatar/examples/avatarImg.svg';\r\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\r\n\r\nimport imgBrand from '../assets/datacenter-logo.png'\r\n\r\nimport Logo from '../components/UI/Logo'\r\n\r\n\r\nimport Header from './Header'\r\nimport MyNotificationDrawer from './NotificationDrawer'\r\nimport MySidebar from './Sidebar'\r\n\r\nimport HomeView from '../Views/Home'\r\n\r\nconst DashboardView = React.lazy(() => {\r\n  return import('../Views/Dashboard')\r\n})\r\nconst TableView = React.lazy(() => {\r\n  return import('../Views/Table')\r\n})\r\nconst NetworkServicesView = React.lazy(() => {\r\n  return import('../Views/NetworkServices')\r\n})\r\nconst ServersView = React.lazy(() => {\r\n  return import('../Views/Servers')\r\n})\r\n\r\nclass BasicNotificationDrawer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isDropdownOpen: false,\r\n      isKebabDropdownOpen: false,\r\n      activeItem: 0,\r\n      isDrawerExpanded: false,\r\n      isUnreadMap: {\r\n        \"notification-1\": true,\r\n        \"notification-2\": true\r\n      },\r\n      showNotifications: true,\r\n      isActionsMenuOpen: null\r\n    };\r\n    this.onDropdownToggle = isDropdownOpen => {\r\n      this.setState({\r\n        isDropdownOpen\r\n      });\r\n    };\r\n    this.onDropdownSelect = event => {\r\n      this.setState({\r\n        isDropdownOpen: !this.state.isDropdownOpen\r\n      });\r\n    };\r\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\r\n      this.setState({\r\n        isKebabDropdownOpen\r\n      });\r\n    };\r\n    this.onKebabDropdownSelect = event => {\r\n      this.setState({\r\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\r\n      });\r\n    };\r\n    this.onNavSelect = result => {\r\n      this.setState({\r\n        activeItem: result.itemId\r\n      });\r\n    };\r\n    \r\n    this.onCloseNotificationDrawer = () => {\r\n      this.setState(prevState => {\r\n        return {\r\n          isDrawerExpanded: !prevState.isDrawerExpanded\r\n        }\r\n      });\r\n    };\r\n    \r\n    this.onToggle = (id, isOpen) => {\r\n      this.setState({\r\n        isActionsMenuOpen: { [id]: isOpen }\r\n      });\r\n    };\r\n    \r\n    this.onSelect = event => {\r\n      this.setState({\r\n        isActionsMenuOpen: null\r\n      });\r\n    };\r\n    \r\n    this.onListItemClick = (id) => {\r\n      this.setState(prevState => {\r\n        if (!prevState.isUnreadMap) return;\r\n        prevState.isUnreadMap[id] = false;\r\n        return {\r\n          isUnreadMap: prevState.isUnreadMap\r\n        }\r\n      });\r\n    }\r\n    \r\n    this.getNumberUnread = () => {\r\n      const { isUnreadMap } = this.state\r\n      if (isUnreadMap === null) return 0;\r\n      return Object.keys(isUnreadMap).reduce((count, id) => {\r\n        return isUnreadMap[id] ? count + 1 : count;\r\n      }, 0);\r\n    }\r\n    \r\n    this.markAllRead = () => {\r\n      this.setState({\r\n        isUnreadMap: null\r\n      });\r\n    }\r\n    \r\n    this.showNotifications = (showNotifications) => {\r\n      this.setState({\r\n        isUnreadMap: null,\r\n        showNotifications: showNotifications\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    const { \r\n      isDropdownOpen, \r\n      isKebabDropdownOpen, \r\n      activeItem, \r\n      res, \r\n      isDrawerExpanded,\r\n      isActionsMenuOpen,\r\n      isUnreadMap,\r\n      showNotifications\r\n    } = this.state;\r\n    const DropdownPosition = {\r\n      right: 'right'\r\n    }\r\n    const DropdownDirection = {\r\n      up: 'up',\r\n      down: 'down'\r\n    }\r\n    const EmptyStateVariant = {\r\n      full: 'full'\r\n    }\r\n\r\n    const pageId = 'main-content-page-layout-default-nav';\r\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\r\n    const PageBreadcrumb = (\r\n      <Breadcrumb>\r\n        <BreadcrumbItem>Section home</BreadcrumbItem>\r\n        <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\r\n        <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\r\n        <BreadcrumbItem to=\"#\" isActive>\r\n          Section landing\r\n        </BreadcrumbItem>\r\n      </Breadcrumb>\r\n    );\r\n    \r\n    const drawerContent = \"Panel content\";\r\n  \r\n    console.log(this)\r\n    \r\n    return (\r\n      <React.Fragment>\r\n        <Page\r\n          header={<Header onCloseNotificationDrawer={this.onCloseNotificationDrawer}\r\n            />}\r\n          sidebar={<MySidebar {...this.props}/>}\r\n          isManagedSidebar\r\n          notificationDrawer={<MyNotificationDrawer\r\n                                onCloseNotificationDrawer={this.onCloseNotificationDrawer}/>}\r\n          isNotificationDrawerExpanded={isDrawerExpanded}\r\n          skipToContent={PageSkipToContent}\r\n          breadcrumb={PageBreadcrumb}\r\n          mainContainerId={pageId}\r\n        >\r\n          <Suspense fallback={<p>loading...</p>}>\r\n            <Switch>\r\n              <Route path=\"/home\" exact component={HomeView}/>\r\n              <Route path=\"/dashboard\" exact render={(props) => <DashboardView {...props}/>}/>\r\n              <Route path=\"/table\" exact render={(props) => <TableView {...props}/>}/>\r\n              <Route path=\"/network-services\" exact render={(props) => <NetworkServicesView {...props}/>}/>\r\n              <Route path=\"/servers\" exact render={(props) => <ServersView {...props}/>}/>\r\n              <Route path=\"/\" component={HomeView}/>\r\n            </Switch>\r\n          </Suspense>\r\n        </Page>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(BasicNotificationDrawer);","\r\n\r\nimport Home from './Home'\r\nimport PageGroupPage from './DemoTemplates/Page/GroupPage'\r\n\r\nexport default [\r\n  {\r\n    path: '/demo/page/group-page', \r\n    component: PageGroupPage,\r\n    props: {exact: true}\r\n  },\r\n  {\r\n    path: '/', \r\n    component: Home,\r\n    props: {}\r\n  },\r\n]","import React from 'react';\r\nimport {\r\n  Page,\r\n  PageHeader,\r\n  PageHeaderTools,\r\n  PageSidebar,\r\n  PageSection,\r\n  PageGroup,\r\n  PageBreadcrumb,\r\n  PageNavigation,\r\n  PageSectionVariants,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  Nav,\r\n  NavList,\r\n  NavItem\r\n} from '@patternfly/react-core';\r\n\r\nclass GroupPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isNavOpen: true\r\n    };\r\n    this.onNavToggle = () => {\r\n      this.setState({\r\n        isNavOpen: !this.state.isNavOpen\r\n      });\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { isNavOpen } = this.state;\r\n\r\n    const logoProps = {\r\n      href: '/',\r\n      onClick: () => console.log('clicked logo'),\r\n      //target: '_blank'\r\n    };\r\n    const Header = (\r\n      <PageHeader\r\n        logo=\"Logo\"\r\n        logoProps={logoProps}\r\n        headerTools={<PageHeaderTools>header-tools</PageHeaderTools>}\r\n        showNavToggle\r\n        isNavOpen={isNavOpen}\r\n        onNavToggle={this.onNavToggle}\r\n      />\r\n    );\r\n    const Sidebar = <PageSidebar nav=\"Navigation\" isNavOpen={isNavOpen} />;\r\n\r\n    return (\r\n      <Page header={Header} sidebar={Sidebar}>\r\n        <PageGroup>\r\n          <PageNavigation>\r\n            <Nav aria-label=\"Nav\" variant=\"tertiary\">\r\n              <NavList>\r\n                <NavItem itemId={0} isActive>\r\n                  System Panel\r\n                </NavItem>\r\n                <NavItem itemId={1}>Policy</NavItem>\r\n                <NavItem itemId={2}>Authentication</NavItem>\r\n                <NavItem itemId={3}>Network Services</NavItem>\r\n                <NavItem itemId={4}>Server</NavItem>\r\n              </NavList>\r\n            </Nav>\r\n          </PageNavigation>\r\n          <PageBreadcrumb>\r\n            <Breadcrumb>\r\n              <BreadcrumbItem>Section home</BreadcrumbItem>\r\n              <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\r\n              <BreadcrumbItem to=\"#\">Section title</BreadcrumbItem>\r\n              <BreadcrumbItem to=\"#\" isActive>\r\n                Section landing\r\n              </BreadcrumbItem>\r\n            </Breadcrumb>\r\n          </PageBreadcrumb>\r\n          <PageSection variant={PageSectionVariants.light}>Grouped section</PageSection>\r\n        </PageGroup>\r\n        <PageSection variant={PageSectionVariants.dark}>Section 1</PageSection>\r\n        <PageSection variant={PageSectionVariants.dark}>Section 2</PageSection>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GroupPage;","import React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport routes from './routes'\n\nconst app = (props) => {\n  let routesView = routes.map(elem => {\n    return <Route \n                path={elem.path} \n                {...elem.props} \n                component={elem.component}></Route>\n  })\n  return (\n    <Switch>\n      {routesView}\n    </Switch>\n  )\n}\n\nexport default withRouter(app);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}